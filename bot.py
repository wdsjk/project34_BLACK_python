from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio

from WeatherManager import WeatherManager


BOT_TOKEN = ''
WEATHER_API_KEY = ''

WEATHER_SERVICE_URL = "http://127.0.0.1:5000"

bot = Bot(token=BOT_TOKEN)
weather_manager = WeatherManager(WEATHER_API_KEY)

storage = MemoryStorage()
dp = Dispatcher(storage=storage)


class WeatherStates(StatesGroup):
    waiting_for_cities = State()
    waiting_for_days = State()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.

–Ø –ø–æ–º–æ–≥—É —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –ø–æ –º–∞—Ä—à—Ä—É—Ç—É –≤–∞—à–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.

–ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤ (–¥–∞–∂–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π)
‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã
‚Ä¢ –í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
/weather - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
/help - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
"""
    await message.answer(welcome_text)


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = """
‚≠êÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/weather - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üåß –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã:
1. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /weather
2. –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
3. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
"""
    await message.answer(help_text)


@dp.message(Command("weather"))
@dp.callback_query(lambda c: c.data.startswith('new_route'))
async def cmd_weather(message: types.Message, state: FSMContext):
    if isinstance(message, types.CallbackQuery):
        message = message.message

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ß–µ–ª—è–±–∏–Ω—Å–∫, –ö–∞–∑–∞–Ω—å, –£—Ñ–∞')")
    await state.set_state(WeatherStates.waiting_for_cities)


@dp.message(WeatherStates.waiting_for_cities)
async def process_start_city(message: types.Message, state: FSMContext):
    cities = [city.strip() for city in message.text.split(',')]

    if len(cities) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        return

    await state.update_data(cities=cities)

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="1 –¥–µ–Ω—å", callback_data="1_days"),
                types.InlineKeyboardButton(text="2 –¥–Ω—è", callback_data="2_days"),
            ],
            [
                types.InlineKeyboardButton(text="3 –¥–Ω—è", callback_data="3_days"),
                types.InlineKeyboardButton(text="4 –¥–Ω—è", callback_data="4_days"),
            ],
            [
                types.InlineKeyboardButton(text="5 –¥–Ω–µ–π", callback_data="5_days")
            ]
        ]
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=keyboard)
    await state.set_state(WeatherStates.waiting_for_days)


@dp.callback_query(lambda c: c.data.endswith('_days'))
async def process_days_selection(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    processing_msg = await callback.message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...")

    user_data = await state.get_data()
    if 'cities' not in user_data:
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /weather"
        )
        await processing_msg.delete()
        await state.clear()
        return

    interval = int(callback.data.split('_')[0])
    cities = user_data['cities']

    try:
        weather_data = {}
        for city in cities:
            weather_data[city] = weather_manager.get_weather_data(city, interval)

        for city, data in weather_data.items():
            summary_text = f"üå§ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}:\n\n"
            for date, values in data.items():
                summary_text += (
                    f"üìÖ {date}\n"
                    f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {values['temperature']:.2f}¬∞C\n"
                    f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {values['wind_speed']:.1f} –º/—Å\n"
                    f"‚òîÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã: {', '.join(values['precipitation'])}\n\n"
                )

            await callback.message.answer(summary_text)

        keyboard_new_route = types.InlineKeyboardMarkup(
            inline_keyboard=[[
                types.InlineKeyboardButton(
                    text="–ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç",
                    callback_data="new_route"
                )
            ]]
        )

        await callback.message.answer("–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö ‚¨ÜÔ∏è", reply_markup=keyboard_new_route)

        await state.update_data(weather_data=weather_data)
        await processing_msg.delete()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}")
        keyboard_exception = keyboard_new_route = types.InlineKeyboardMarkup(
            inline_keyboard=[[
                types.InlineKeyboardButton(
                    text="–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞",
                    callback_data="new_route"
                )
            ]]
        )
        await processing_msg.delete()
        await callback.message.answer(
            f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=keyboard_exception
        )

    await state.set_state(WeatherStates.waiting_for_cities)


@dp.message()
async def process_messages(message: types.Message):
    await bot.send_message(message.chat.id, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:\n/start\n/help\n/weather")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
